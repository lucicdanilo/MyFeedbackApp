{"version":3,"sources":["Projects.js","Website.js","CV.js","App.js","serviceWorker.js","index.js"],"names":["Projects","props","state","projects","event","preventDefault","document","getElementById","innerHTML","projectFeedback","project","target","selectProject","value","design","designSlider","performance","performanceSlider","content","contentSlider","text","textFeedback","projectFeedbackJSON","JSON","stringify","request","XMLHttpRequest","open","setRequestHeader","send","style","display","this","setState","id","name","projectsList","length","map","item","i","key","onSubmit","handleSubmit","class","for","type","min","max","step","calss","rows","cols","Component","Website","websitesFeedback","websitesFeedbackJSON","CV","cvFeedback","cvFeedbackJSON","App","$","window","on","delay","fadeOut","to","path","component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.441866ae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Projects extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projects: []\r\n    };\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    document.getElementById(\"title\").innerHTML = \"Thank you for feedback!\";\r\n    document.getElementById(\"subtitle\").innerHTML =\r\n      \"You can leave feedback on other categories and projects if you want.\";\r\n\r\n    var projectFeedback = {\r\n      project: event.target.selectProject.value,\r\n      design: event.target.designSlider.value,\r\n      performance: event.target.performanceSlider.value,\r\n      content: event.target.contentSlider.value,\r\n      text: event.target.textFeedback.value\r\n    };\r\n\r\n    var projectFeedbackJSON = JSON.stringify(projectFeedback);\r\n    var request = new XMLHttpRequest();\r\n    request.open(\r\n      \"POST\",\r\n      \"https://cors-anywhere.herokuapp.com/https://feedbackappapi.glitch.me/projectFeedback\",\r\n      true\r\n    );\r\n    request.setRequestHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n    request.send(projectFeedbackJSON);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.getElementById(\"wellcomeImage\").style.display = \"none\";\r\n    this.setState({\r\n      projects: [\r\n        { id: \"general\", name: \"General\" },\r\n        { id: \"physicsquiz\", name: \"Physics Quiz\" },\r\n        { id: \"conwaysgameoflife\", name: \"Conways Game of Life\" },\r\n        { id: \"subedit\", name: \"Subtitle Edit\" },\r\n        { id: \"myrecipeapi\", name: \"My Recipe API\" },\r\n        { id: \"myfeedbackapp\", name: \"My Feedback App\" }\r\n      ]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { projects } = this.state;\r\n\r\n    let projectsList =\r\n      projects.length > 0 &&\r\n      projects.map((item, i) => {\r\n        return (\r\n          <option key={i} value={item.id}>\r\n            {item.name}\r\n          </option>\r\n        );\r\n      }, this);\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div class=\"boxRate\">\r\n          <h2 class=\"dynamicSubtitle\">Feedback for Projects:</h2>\r\n          <div class=\"choseProject\">\r\n            <select name=\"selectProject\">{projectsList}</select>\r\n          </div>\r\n          <div class=\"designRate\">\r\n            <div class=\"slidecontainer\">\r\n              <label class=\"designSliderLabel\" for=\"designSlider\">\r\n                Ocijeni dizajn projekta:\r\n              </label>\r\n              <input\r\n                type=\"range\"\r\n                name=\"designSlider\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"1\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"performanceRate\">\r\n            <div class=\"slidecontainer\">\r\n              <label for=\"performanceSlider\">\r\n                Ocijeni performanse Projekta:\r\n              </label>\r\n              <input\r\n                type=\"range\"\r\n                name=\"performanceSlider\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"1\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"contentRate\">\r\n            <div class=\"slidecontainer\">\r\n              <label for=\"contentSlider\">Ocijeni sadrazaj projekta:</label>\r\n              <input\r\n                type=\"range\"\r\n                name=\"contentSlider\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"1\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div calss=\"textSubmitReview\">\r\n            <textarea name=\"textFeedback\" rows=\"6\" cols=\"50\">\r\n              Here you can send me ideas for better old projects or ideas for\r\n              new!\r\n            </textarea>\r\n          </div>\r\n          <input type=\"submit\" class=\"submitButton\" value=\"Submit\" />\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Projects;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Website extends Component {\r\n  componentDidMount() {\r\n    document.getElementById(\"wellcomeImage\").style.display = \"none\";\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    document.getElementById(\"title\").innerHTML = \"Thank you for feedback!\";\r\n    document.getElementById(\"subtitle\").innerHTML =\r\n      \"You can leave feedback on other categories and projects if you want.\";\r\n\r\n    var websitesFeedback = {\r\n      design: event.target.designSlider.value,\r\n      performance: event.target.performanceSlider.value,\r\n      content: event.target.contentSlider.value,\r\n      text: event.target.textFeedback.value\r\n    };\r\n\r\n    var websitesFeedbackJSON = JSON.stringify(websitesFeedback);\r\n    var request = new XMLHttpRequest();\r\n    request.open(\r\n      \"POST\",\r\n      \"https://cors-anywhere.herokuapp.com/https://feedbackappapi.glitch.me/websiteFeedback\",\r\n      true\r\n    );\r\n    request.setRequestHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n    request.send(websitesFeedbackJSON);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div class=\"boxRate\">\r\n          <h2 class=\"dynamicSubtitle\">Feedback for Website:</h2>\r\n          <div class=\"designRate\">\r\n            <div class=\"slidecontainer\">\r\n              <label for=\"designSlider\">Ocijeni dizajn Website-a:</label>\r\n              <input\r\n                type=\"range\"\r\n                name=\"designSlider\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"1\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"performanceRate\">\r\n            <div class=\"slidecontainer\">\r\n              <label for=\"performanceSlider\">\r\n                Ocijeni performanse Website-a:\r\n              </label>\r\n              <input\r\n                type=\"range\"\r\n                name=\"performanceSlider\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"1\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"contentRate\">\r\n            <div class=\"slidecontainer\">\r\n              <label for=\"contentSlider\">Ocijeni sadrzaj Website:</label>\r\n              <input\r\n                type=\"range\"\r\n                name=\"contentSlider\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"1\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div calss=\"textSubmitReview\">\r\n            <textarea name=\"textFeedback\" rows=\"6\" cols=\"50\">\r\n              Here you can send me ideas for better website on design,\r\n              performance, content and etc.\r\n            </textarea>\r\n          </div>\r\n          <input type=\"submit\" class=\"submitButton\" value=\"Submit\" />\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Website;\r\n","import React, { Component } from \"react\";\r\n\r\nclass CV extends Component {\r\n  componentDidMount() {\r\n    document.getElementById(\"wellcomeImage\").style.display = \"none\";\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    document.getElementById(\"title\").innerHTML = \"Thank you for feedback!\";\r\n    document.getElementById(\"subtitle\").innerHTML =\r\n      \"You can leave feedback on other categories and projects if you want.\";\r\n\r\n    var cvFeedback = {\r\n      design: event.target.designSlider.value,\r\n      content: event.target.contentSlider.value,\r\n      text: event.target.textFeedback.value\r\n    };\r\n\r\n    var cvFeedbackJSON = JSON.stringify(cvFeedback);\r\n    var request = new XMLHttpRequest();\r\n    request.open(\r\n      \"POST\",\r\n      \"https://cors-anywhere.herokuapp.com/https://feedbackappapi.glitch.me/cvFeedback\",\r\n      true\r\n    );\r\n    request.setRequestHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n    request.send(cvFeedbackJSON);\r\n  }\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div class=\"boxRate\">\r\n          <h2 class=\"dynamicSubtitle\">Feedback for CV:</h2>\r\n          <div class=\"designRate\">\r\n            <div class=\"slidecontainer\">\r\n              <label class=\"designSliderLabel\" for=\"designSlider\">\r\n                Ocijeni dizajn CV-a:\r\n              </label>\r\n              <input\r\n                type=\"range\"\r\n                name=\"designSlider\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"1\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"contentRate\">\r\n            <div class=\"slidecontainer\">\r\n              <label for=\"contentSlider\">Ocijeni sadrazaj CV-a:</label>\r\n              <input\r\n                type=\"range\"\r\n                name=\"contentSlider\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                step=\"1\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div calss=\"textSubmitReview\">\r\n            <textarea name=\"textFeedback\" rows=\"6\" cols=\"50\">\r\n              Here you can send me ideas for better CV on design and content.\r\n            </textarea>\r\n          </div>\r\n          <input type=\"submit\" class=\"submitButton\" value=\"Submit\" />\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CV;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Projects from \"./Projects\";\nimport Website from \"./Website\";\nimport CV from \"./CV\";\nimport $ from \"jquery\";\n\nfunction App() {\n  $(window).on(\"load\", function() {\n    $(\".loader-wrapper\")\n      .delay(1500)\n      .fadeOut(\"slow\");\n  });\n  return (\n    <Router>\n      <div>\n        <h1 class=\"title\" id=\"title\">\n          Wellcome to my Feedback App\n        </h1>\n        <h4 class=\"subtitle\" id=\"subtitle\">\n          I build this app for learning React, improving my old projects and\n          finding ideas for future projects as well!\n        </h4>\n        <div class=\"categoriesLinks\">\n          <li>\n            <Link to={\"/projects\"}>Projects</Link>\n          </li>\n          <li>\n            <Link to={\"/website\"}>Website</Link>\n          </li>\n          <li>\n            <Link to={\"/cv\"}>CV</Link>\n          </li>\n        </div>\n        <Switch>\n          <Route path=\"/projects\" component={Projects} />\n          <Route path=\"/website\" component={Website} />\n          <Route path=\"/cv\" component={CV} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}